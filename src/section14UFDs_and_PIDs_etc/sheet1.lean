/-
Copyright (c) 2023 Kevin Buzzard. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Author : Kevin Buzzard
-/

import tactic
import ring_theory.principal_ideal_domain -- theory of PIDs
import data.polynomial.field_division -- polynomial rings over a field are PIDs
/-

# Principal Ideal Domains

First let's showcase what mathlib has.

Let `R` be a commutative ring.
-/

variables (R : Type) [comm_ring R]

-- We say `R` is a *principal ideal ring* if all ideals are principal.
-- We say `R` is a *domain* if it's an integral domain. 
-- We say `R` is a *principal ideal domain* if it's both.

-- So here's how to say "Assume `R` is a PID":

variables [is_principal_ideal_ring R] [is_domain R]

-- Note that both of these are typeclasses, so various things should
-- be automatic.

example : ∀ a b : R, a * b = 0 → a = 0 ∨ b = 0 :=
begin
  intros a b,
  apply eq_zero_or_eq_zero_of_mul_eq_zero, -- typeclass inference 
  -- magically extracts the assumption from `is_domain`
end

example : (0 : R) ≠ 1 :=
begin
  -- this is another consequence of being an integral domain
  apply zero_ne_one,
end

example (I : ideal R) : I.is_principal :=
begin
  -- typeclass inference system finds `is_principal_ideal_ring` and
  -- uses it automatically
  exact is_principal_ideal_ring.principal I,
end

example (I : ideal R) : ∃ j, I = ideal.span {j} :=
begin
  -- to make a term of type `is_principal I` you need to give one proof,
  -- but we still need to do `cases` or equivalent (I used `obtain` below)
  -- to get this proof out.
  obtain ⟨h⟩ := is_principal_ideal_ring.principal I,
  exact h,
end

-- Typeclass inference knows a bunch of theorems about PIDs and which things are PIDs.
-- Examples:

-- integers are a PID
example : is_principal_ideal_ring ℤ := begin
  exact euclidean_domain.to_principal_ideal_domain
end

-- just check the domain bit:
example : is_domain ℤ := begin
  apply_instance
end

-- a field is a PID
example (k : Type) [field k] : is_principal_ideal_ring k :=
begin
  apply_instance
end

example (k : Type) [field k] : is_domain k :=
begin
  apply_instance
end

open_locale polynomial -- to get `k[X]` notation instead of `polynomial k`

-- polys over a field are a PID
example (k : Type) [field k] : is_principal_ideal_ring k[X] :=
begin
  apply_instance
end

example (k : Type) [field k] : is_domain k[X] :=
begin
  apply_instance
end

-- if all ideals of a ring are principal then the ring is a principal ideal ring
example (A : Type) [comm_ring A] (h : ∀ I : ideal A, I.is_principal) : is_principal_ideal_ring A :=
{ principal := h }

-- see if you can prove that the ideal generated by 4 and 6 in any commutative ring is principal.
example (A : Type) [comm_ring A] : (ideal.span ({4, 6} : set A)).is_principal :=
begin
  sorry,
end

-- product of two PIDs isn't a PID, but only becuase it's not a domain
example (A B : Type) [comm_ring A] [comm_ring B]
  [is_principal_ideal_ring A] [is_principal_ideal_ring B] :
  is_principal_ideal_ring (A × B) :=
{ principal := begin
    sorry,
  end }
